version: '3.3'

services:
  base: &skale_base
    image: kubernetes/pause
    restart: unless-stopped
    labels:
      com.skale.prefix: "node"
    logging:
      driver: "json-file"
      options:
        max-file: "5"
        max-size: "10m"
  transaction-manager:
    <<: *skale_base
    container_name: skale_transaction-manager
    image: skalenetwork/transaction-manager:0.1.1-beta.0
    network_mode: host
    tty: true
    environment:
      SGX_SERVER_URL: ${SGX_SERVER_URL}
      SGX_CERTIFICATES_DIR_NAME: ${SGX_CERTIFICATES_DIR_NAME}
      ENDPOINT: ${ENDPOINT}
      FLASK_SECRET_KEY: ${FLASK_SECRET_KEY} # todo: use different flask secret key!
      FLASK_APP_PORT: 3008
      FLASK_APP_HOST: "127.0.0.1"
      FLASK_DEBUG_MODE: "False"
      SKALE_DIR_HOST: ${SKALE_DIR}
    volumes:
      - ${SKALE_DIR}:/skale_vol
      - ${SKALE_DIR}/node_data:/skale_node_data
    ports:
      - 3008:3008
  admin:
    <<: *skale_base
    container_name: skale_admin
    image: skalenetwork/admin:0.8.0-beta.9
    network_mode: host
    tty: true
    cap_add:
      - NET_ADMIN
      - NET_RAW
    environment:
      TM_URL: http://127.0.0.1:3008
      SGX_SERVER_URL: ${SGX_SERVER_URL}
      SGX_CERTIFICATES_DIR_NAME: ${SGX_CERTIFICATES_DIR_NAME}
      ENDPOINT: ${ENDPOINT}
      IMA_ENDPOINT: ${IMA_ENDPOINT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      DB_PORT: ${DB_PORT}
      DOCKER_USERNAME: ${DOCKER_USERNAME}
      DOCKER_PASSWORD: ${DOCKER_PASSWORD}
      FLASK_SECRET_KEY: ${FLASK_SECRET_KEY}
      FLASK_APP_PORT: 3007
      FLASK_APP_HOST: "127.0.0.1"
      FLASK_DEBUG_MODE: "False"
      SKALE_DIR_HOST: ${SKALE_DIR}
    ports:
      - 3007:3007
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${SKALE_DIR}:/skale_vol
      - ${SKALE_DIR}/node_data:/skale_node_data
    depends_on:
      - mysql
  mysql:
    <<: *skale_base
    container_name: skale_mysql
    image: mysql/mysql-server:5.7
    network_mode: host
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - ~/.skale/node_data/mysql-data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: "db_skale"
    ports:
      - ${DB_PORT}:3306

  sla:
    <<: *skale_base
    container_name: skale_sla
    image: skalenetwork/sla-agent:0.4.3-beta.1
    network_mode: host
    environment:
      TM_URL: http://127.0.0.1:3008
      ENDPOINT: ${ENDPOINT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      DB_PORT: ${DB_PORT}
    volumes:
      - ${SKALE_DIR}:/skale_vol
      - ${SKALE_DIR}/node_data:/skale_node_data
    depends_on:
      - mysql

  bounty:
    <<: *skale_base
    container_name: skale_bounty
    image: skalenetwork/bounty-agent:0.4.3-beta.1
    network_mode: host
    environment:
      TM_URL: http://127.0.0.1:3008
      ENDPOINT: ${ENDPOINT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      DB_PORT: ${DB_PORT}
    volumes:
      - ${SKALE_DIR}:/skale_vol
      - ${SKALE_DIR}/node_data:/skale_node_data
    depends_on:
      - mysql

  watchdog:
    <<: *skale_base
    container_name: skale_watchdog
    image: skalenetwork/watchdog:0.0.1-beta.1
    network_mode: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      FLASK_APP_PORT: 3009
      FLASK_APP_HOST: "0.0.0.0"
      FLASK_DEBUG_MODE: "False"

  advisor:
    <<: *skale_base
    container_name: monitor_cadvisor
    image: google/cadvisor:latest
    network_mode: host
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "8080:8080"

  node-exporter:
    <<: *skale_base
    container_name: monitor_node_exporter
    image: quay.io/prometheus/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    network_mode: host

  filebeat:
    <<: *skale_base
    container_name: monitor_filebeat
    user: root
    image: docker.elastic.co/beats/filebeat:7.3.1
    network_mode: host
    environment:
      FILEBEAT_HOST: ${FILEBEAT_HOST}
    volumes:
      - ${SKALE_DIR}/node_data/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock
