filebeat.inputs:
- type: container
  paths:
    - '/var/lib/docker/containers/*/*.log'

- type: log
  enabled: true
  paths:
    - '/var/log/docker-lvmpy/lvmpy.log'

processors:
- add_host_metadata:
#    netinfo.enabled: false
- add_docker_metadata:
    host: "unix:///var/run/skale/docker.sock"
- add_fields:
    fields:
      id: {{ id }}
      ip: '{{ ip }}'
      contract_address: '{{ contract_address }}'
- decode_json_fields:
    fields: ["message", "log"]
#    target: "json"
    target: ""
    overwrite_keys: true
- script:
    lang: javascript
    source: >
      function process(event) {
          var inputType = event.Get("input").type;
          var filterIp = true;
          if (inputType == "container") {
              event.Put("test", event.Get("container").name);
              var containerName = event.Get("container").name;
              if (containerName.indexOf("skale_schain") == 0 || containerName.indexOf("skale_ima") == 0) {
                  filterIp = false;
              }
          }
          var msg = event.Get("message");
          var matches = [];
          matches.push.apply(matches, msg.match(/NEK\:\w+/ig));
          if (filterIp) {
              event.Put("filter_ip", "yes");
              matches.push.apply(matches, msg.match(/\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b/ig));
          } else {
              event.Put("filter_ip", "no");
          }
          matches.forEach(function (m) { msg = msg.replace(m, "HIDDEN"); } );
          event.Put("message", msg);
      }

output.file:
  path: "/usr/share/filebeat/"
  filename: out

logging.json: true
logging.metrics.enabled: false
